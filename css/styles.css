body {
    background-color: #192f5e;
    font-family: sans-serif;
}

.flex-container {
    display: flex;
    justify-content: space-between;
}

/* *************** header & nav ****************** */
/* Step: 1 Style the default/showing state. Starting with the mobile view, style the layout and links for how they will look when visible */
header {
    background-color: #fff;
    padding: 2%;
}

header a {
    color: #3f3f3f;
    text-decoration: none;
    /* allows the clickable area to take up the full width and height of the li */
    display: block;
}

.menu a:hover,
.menu a:active {
    background-color: gainsboro;
    border-radius: 4px;
}

.toggle-btn {
    border: none;
    background-color: #fff;
    outline: none;
}

.toggle-btn:hover {
    cursor: pointer;
}

svg rect {
    fill: #3f3f3f;
}

.menu li {
    /* the extra space from the additional line height, makes this a larger area and vertically centers the text */
    line-height: 40px;
    text-align: center;
}

/* Step 2: Now let's hide the menu. Once it's hidden this is the default load stage. If using display: none; - that property cannot be transitioned. */

header nav {
    /* style this for how it will look overlapped the main content */
    position: absolute;
    top: 66px;
    left: 0;
    /* once positioning absolute, this disappears from the document flow and it doesn't leave a space where it was. This does not have a background color, because it's not content the header sees anymore */
    background-color: #fff;
    width: 100vw;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.7s ease-in-out;
}

/* Step 3: Create a special class that will show the menu. This class name exists only in the CSS file for now. Next the javascript will add this class to the nav element for us. Let's go and do that in the main.js file */
.show-nav {
    max-height: 300px;
    padding-bottom: 2rem;
}

/* ************************* section ****************** */
section {
    padding: 3.125rem;
    text-align: center;
    text-transform: uppercase;
}

section p {
    color: #d5e294;
    border-bottom: 2px solid #d5e294;
    padding-bottom: 10px;
    margin-bottom: 10px;
    font-size: 1.777rem;
}

section h2 {
    color: #fff;
    font-size: 3.157rem;
    margin-bottom: 2rem;
}

.gallery {
    display: flex;
    flex-flow: wrap;
    justify-content: center;
}

.thumbnail {
    margin: 0 0.5rem;
    position: relative;
}

.thumbnail img {
    margin-bottom: 1rem;
}

span {
    background-color: #87a6ab;
    color: #fff;
    font-weight: bold;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    /* position this span over the image */
    position: absolute;
    /* The top, right, bottom, left values position in relation to the screen UNLESS the parent container is a relative positioned element */
    top: -20px;
    right: -15px;
}

/* Step 4: add a media query and show the nav by default (hide the toggle button) and style it as a horizontal nav */

@media only screen and (min-width: 37.5em) {
    .toggle-btn {
        display: none;
    }

    /* we want to see the nav by default, so give it a height back */
    header nav  {
        /* reset the position value and the width */
        /* position static is how elements are normally placed - unsetting the absolute value */
        position: static;
        width: auto;
        max-height: 200px;
        overflow: visible;
    }

    .menu,
    header {
        display: flex;
        justify-content: space-between;
    }

    .menu li {
        margin-left: 0.5rem;
    }

    .menu li a {
        padding: 0 0.5rem;
    }
}